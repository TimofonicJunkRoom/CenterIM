Instalación Básica
==================

   Estas son intrucciones genéricas de instalación.

   El archivo script `configure' intentara adivinar los valores correctos de
varias variables dependientes del sistema usado durante la compilación.
Usa esos valores para crear un archivo `Makefile' en cada directorio del
paquete.
Puede que además cree uno o mas archivos `.h' conteniendo las dependencias del
sistema. Finalmente crea un archivo script `config.status' que usted puede
ejecutar en el futuro para recrear la configuración actual, un archivo
`config.cache' que guarda los resultados de los tests para acelerar la 
re-configuración, y un archivo `config.log' que contiene la salida del compilador
(principalmente de utilidad para debugging `configure').

    Si necesita hacer cosas inusuales para compilar el paquete, por favor
intente comprender como 'configure' podría hacerlo, y envíe un mail con las 
diferencias o instrucciones a la dirección dada en el archivo `README' entonces
ellos podrían considerarlo en la próxima mejora. Si en algún punto 
`config.cache' contiene resultados que usted no quiere retener, puede 
removerlos o editarlos.

El archivo `configure.in' es usado para crear `configure' atraves de un
programa llamado `autoconf'.  Usted solo necesita `configure.in' si quiere
cambiar o regenerar `configure' usando una nueva versión de autoconf `autoconf'.

La manera mas simple de compilar este paquete es:

  1. `cd' Hasta el directorio con los paquetes de código fuente y escriba
     `./configure' para configurar los paquetes para su sistema.  Si usted esta
     usando `csh' en una vieja versión de sistema V, deberá escribir
     `sh ./configure' para prevenir que `csh' intente ejecutar `configure' por
     si mismo.

     Ejecutar lleva un momento `configure'.  Mientras que ejecuta, imprime
     algunos mensajes diciendo que opciones esta llevando a cavo.

  2. Escriba `make' para compilar el paquete.

  3. De manera opcional, escriba `make check' para ejecutar cualquier autotest
     que venga con el paquete.

  4. Escriba `make install' para instalar el programa y cualquier archivo de 
     datos y documentación.

  5. Usted puede borrar todos los binarios del programa y los archivos object
     del directorio donde se encontraban los fuentes escribiendo `make clean'.
     Para borrar los archivos creados por `configure' (entonces usted puede
     compilar el paquete para otra maquina diferente), escriba `make distclean'.
     Hay también un archivo trget `make maintainer-clean', pero esta concebido
     principalmente para los desarrolladores del paquete principalmente.  If 
     usted lo usa, debería conseguir todos los otros sets de programas para
     regenerar archivos que venían con esta distribución.

Opciones Del Compilador
=======================

    Algunos sistemas requieren opciones inusuales para la compilación o el
linking de las que el script 'configure' no sabe nada.  Usted puede darle a
`configure' valores iniciales para algunas variables "seteandolas" en el
    entorno. Usando un shell compatible con el Bourne, usted podría hacerlo
    desde la línea de comandos algo así como esto:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

    O sistemas que tienen el programa `env', usted puede hacerlo de esta manera:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compilando Para Múltiples Arquitecturas
=======================================

   Usted puede compilar el programa para mas de un tipo de computadora al mismo
tiempo, poniendo los archivos object para cada arquitectura en el directorio
correspondiente.  Para hacer esto, usted debe usar la versión de `make' que
soporte la variable `VPATH', asi como GNU `make'.  `cd' al directorio donde
usted usted quiere que vayan los archivos object y los ejecutables para luego
ejecutar el archivo script `configure'.  `configure' automáticamente comprueba
el código fuente en el directorio donde `configure' esta y en `..'.

   Si usted tiene que usar un `make' que no soporta la variable `VPATH', debe
configurar los paquetes para una arquitectura a la vez en el código fuente del
directorio.  Luego de que haya instalado el paquete para una arquitectura, use
`make distclean' antes de reconfigurar todo para otra arquitectura.

Nombres De Instalación
======================

   Por defecto, `make install' instalara los paquetes en`/usr/local/bin',
`/usr/local/man', etc.  Usted puede especificar otro escribiendo `configure' con
la opción `--prefix=PATH'.

    Puede especificar prefijos separados de instalación para archivos
específicos de arquitectura y archivos independientes de arquitectura. Si usted
da a `configure' la opción `--exec-prefix=PATH', el paquete usara PATH com el
prefijo para la instalación del programa y las librerías. La documentación y
otros datos seguirán usando el prefijo regular.

   Además, si usa un directorio inusual puede dar opciones como `--bindir=PATH'
para especificar diferentes valores para tipos particulares de archivos.
Ejecutar `configure --help' para una lista de directorios que usted puede
"setear" y que tipo de archivos van en ellos.

    Si el paquete lo soporta, tu puedes hacer que los programas se instalen con
un prefijo o sufijo extra en sus nombres dando a `configure' la opción
`--program-prefix=PREFIX' o `--program-suffix=SUFFIX'.

Características Opcionales
==========================

Algunos paquetes entienden  `--enable-FEATURE' opciones a
`configure', donde FEATURE indica una parte opcional del paquete.
También deben prestar atención a las opciones`--with-PACKAGE' , donde PACKAGE
es algo así como `gnu-as' o `x' (para el sistema X Windows).  El
`README' debe mencionar alguna opción `--enable-' y `--with-' que el paquete reconozca


   Para los paquetes que usan el sistema de X Windows, `configure' puede
usualmente encontrar automáticamente las librerías de las X, pero si no lo hace
puede ser especificada con la opción `--x-includes=DIR' y `--x-libraries=DIR'.

Especificando El Tipo De Sistema
================================

   Habrá algunas características que `configure' no podrá saber por si solo,
pero necesita determinar el tipo de host donde el programa va a ser ejecutado.
Usualmente `configure' puede darse cuenta de eso por si solo, pero si imprime
un mensaje diciendo que no puede elegir el tipo de host, se le debe dar atraves
de la opción `--host=TYPE'.  TYPE puede ser un nombre corto para el sistema,
así como `sun4', o un nombre canónico con tres campos:
     CPU-COMPANY-SYSTEM

Vea el archivo `config.sub' para la posibles valores de cada campo. Si
`config.sub' no esta incluido en este paquete, entonces este paquete no
necesita saber el nombre del host.

   Si esta construyendo herramientas de compilación para cross-compiling, usted
también puede usar la opción `--target=TYPE' para poder elegir el tipo de
sistema para el cual se va a producir el código y la opción `--build=TYPE' para
el tipo de sistema en el cual esta compilando el paquete.

Valores Por Defecto
===================

Si usted quiere "setear" valores por defecto para que los archivos `configure'
   los compartan, usted puede crear un site shell script 'config.site' que da
   valores por defecto a las variables como `CC', `cache_file', y `prefix'.
`configure' ven si existe: `PREFIX/share/config.site', luego ven si existe
`PREFIX/etc/config.site'.  O puede "setear" la variable de entorno `CONFIG_SITE'
con el lugar donde se encuentra el site script.
Tenga cuidado: No todos los `configure' buscan un site script.

Controles de operación
======================

   `configure' reconoce las siguientes opciones para controlar su modo de
 operación.

`--cache-file=FILE'
    Usa y guarda los resultados del test en FILE en vez de `./config.cache'.
"Setea" FILE a `/dev/null' para deshabilitar caching, para debugging `configure'.

`--help'
     Imprime un sumario de las opciones para `configure', y sale.

`--quiet'
`--silent'
`-q'
     No imprime mensajes diciendo que chequeos están siendo hechos. Para
     suprimir por completo la salida normal, redireccionarla a /dev/null
     (cualquier mensaje de error seguirá aun así siendo mostrado).

`--srcdir=DIR'
     Busca los paquetes de código fuente en el directorio DIR. Usualmente
     `configure' puede determinar el directorio automáticamente.

`--version'
     Imprime la versión de Autoconf usada para generar el script 'configure', y
     sale.

`configure' además acepta algunas otras opciones de no tanta utilidad.

